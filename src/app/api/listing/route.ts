import { NextResponse } from "next/server";
import { AddListingData } from "@/lib/firebase/firestore/types";
import addListing from "@/lib/firebase/firestore/listing/addListing";
import getAllListings from "@/lib/firebase/firestore/listing/getAllListings";
import { logger } from "@/lib/monitoring/config";

/*
 * Create new Listing
 *
 * Params:
 *  None
 * Request body:
 *  user_id: id of the owner of the Listing
 *  title: title of the Listing
 *  price: price of the Listing
 *  condition: condition of the Listing
 *  category: category of the Listing
 *  description: description of the Listing
 *  image_paths: list of paths to images for the Listing
 * Return:
 *  data: id of the new Listing generated by firestore
 */
export async function POST(req: Request) {
  const start = performance.now();
  try {
    // get updated listing data from req body
    const data: AddListingData = await req.json();

    const desired_fields = [
      'user_id',
      'title',
      'price',
      'condition',
      'category',
      'description',
      'image_paths',
    ];

    // validate input for only valid fields
    Object.keys(data).forEach((key) => {
      if (!desired_fields.includes(key)) {
        throw new Error('invalid listing field');
      }
    });

    // validate all fields are present
    desired_fields.forEach((val) => {
      if (!Object.keys(data).includes(val)) {
        throw new Error('missing listing field');
      }
    });

    // validate price is nonnegative
    if (data.price < 0) {
      throw new Error('price must be nonnegative');
    }

    const result = await addListing(data);

    logger.increment('listingCreation');
    return NextResponse.json({ data: result, error: null});
  } catch (e: unknown) {
    logger.increment('POST_listing_API_failure');
    if (e instanceof Error) {
      return NextResponse.json({ data: null, error: e.message});
    } else {
      return NextResponse.json({ data: null, error: 'unknown error'});
    }
  } finally {
    const end = performance.now();
    logger.log(`POST /api/listing in ${end - start} ms`);
  }
}

/*
 * Get all Listings that do not have a selected buyer and match the query
 *
 * Params:
 *  None
 * Query Params:
 *  query?: filter/sort query for Listing search
 *  limit?: max number of Listings to retrieve
 *  last_rating?: rating of last listing retrieved
 *  last_updated?: updated Timestamp of last listing retrieved, in millis
 * Return:
 *  data: list of Listings that match the query (truncated data)
 */
export async function GET(req: Request) {
  const start = performance.now();
  try {
    // get query data from url
    const queryData = Object.fromEntries((new URL(req.url)).searchParams.entries());
    const { query, limit, last_rating, last_updated } = queryData;

    const response = await getAllListings(query, parseInt(limit), parseFloat(last_rating), parseFloat(last_updated));

    return NextResponse.json({ data: {listings: response}, error: null })
  } catch (e: unknown) {
    logger.increment('GET_listings_API_failure');
    if (e instanceof Error) {
      return NextResponse.json({ data: null, error: e.message });
    } else {
      return NextResponse.json({ data: null, error: "unknown error" });
    }
  } finally {
    const end = performance.now();
    logger.log(`GET /api/listing in ${end - start} ms`);
  }
}
