import { NextResponse } from "next/server";
import { Listing, newListing, AddListingData } from "@/lib/firebase/firestore/types";
import getAllListings from "@/lib/firebase/firestore/listing/getAllListings";

/*
 * Create new Listing
 *
 * Params:
 *  None
 * Request body:
 *  user_id: id of the owner of the Listing
 *  title: title of the Listing
 *  price: price of the Listing
 *  condition: condition of the Listing
 *  category: category of the Listing
 *  description: description of the Listing
 *  image_paths: list of paths to images for the Listing
 * Return:
 *  data: id of the new Listing generated by firestore
 */
export async function POST(req: Request) {
  // TODO: addListing to db
  try {
    // get updated listing data from req body
    const data: AddListingData = await req.json();

    let result = await addListing(data);
    return NextResponse.json({ data: result, error: {}});
  } catch (e: unknown) {
    if (e instanceof Error) {
      return NextResponse.json({ data: null, error: e.message});
    } else {
      return NextResponse.json({ data: null, error: "unknown error"});
    }
  }
}

/*
 * Get all Listings that do not have a selected buyer and match the query
 *
 * Params:
 *  None
 * Query Params:
 *  query?: filter/sort query for Listing search
 *  limit?: max number of Listings to retrieve
 *  last_rating?: rating of last listing retrieved
 *  last_updated?: updated Timestamp of last listing retrieved, in millis
 * Return:
 *  data: list of Listings that match the query (truncated data)
 */
export async function GET(req: Request) {
  try {
    // get query data from url
    const queryData = Object.fromEntries((new URL(req.url)).searchParams.entries());
    const { query, limit, last_rating, last_updated } = queryData;

    const response = await getAllListings(query, parseInt(limit), parseFloat(last_rating), parseFloat(last_updated));

    return NextResponse.json({ data: {listings: response}, error: null })
  } catch (e: unknown) {
    if (e instanceof Error) {
      return NextResponse.json({ data: null, error: e.message });
    } else {
      return NextResponse.json({ data: null, error: "unknown error" });
    }
  }
}
